//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Tag = newTagTable("public", "tag", "")

type tagTable struct {
	postgres.Table

	//Columns
	GuildID   postgres.ColumnString
	OwnerID   postgres.ColumnString
	Name      postgres.ColumnString
	Content   postgres.ColumnString
	Uses      postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TagTable struct {
	tagTable

	EXCLUDED tagTable
}

// AS creates new TagTable with assigned alias
func (a TagTable) AS(alias string) *TagTable {
	return newTagTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TagTable with assigned schema name
func (a TagTable) FromSchema(schemaName string) *TagTable {
	return newTagTable(schemaName, a.TableName(), a.Alias())
}

func newTagTable(schemaName, tableName, alias string) *TagTable {
	return &TagTable{
		tagTable: newTagTableImpl(schemaName, tableName, alias),
		EXCLUDED: newTagTableImpl("", "excluded", ""),
	}
}

func newTagTableImpl(schemaName, tableName, alias string) tagTable {
	var (
		GuildIDColumn   = postgres.StringColumn("guild_id")
		OwnerIDColumn   = postgres.StringColumn("owner_id")
		NameColumn      = postgres.StringColumn("name")
		ContentColumn   = postgres.StringColumn("content")
		UsesColumn      = postgres.IntegerColumn("uses")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		allColumns      = postgres.ColumnList{GuildIDColumn, OwnerIDColumn, NameColumn, ContentColumn, UsesColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{OwnerIDColumn, ContentColumn, UsesColumn, CreatedAtColumn}
	)

	return tagTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		GuildID:   GuildIDColumn,
		OwnerID:   OwnerIDColumn,
		Name:      NameColumn,
		Content:   ContentColumn,
		Uses:      UsesColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
