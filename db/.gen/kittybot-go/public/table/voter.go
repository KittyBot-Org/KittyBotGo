//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Voter = newVoterTable("public", "voter", "")

type voterTable struct {
	postgres.Table

	//Columns
	UserID    postgres.ColumnString
	ExpiresAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type VoterTable struct {
	voterTable

	EXCLUDED voterTable
}

// AS creates new VoterTable with assigned alias
func (a VoterTable) AS(alias string) *VoterTable {
	return newVoterTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VoterTable with assigned schema name
func (a VoterTable) FromSchema(schemaName string) *VoterTable {
	return newVoterTable(schemaName, a.TableName(), a.Alias())
}

func newVoterTable(schemaName, tableName, alias string) *VoterTable {
	return &VoterTable{
		voterTable: newVoterTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newVoterTableImpl("", "excluded", ""),
	}
}

func newVoterTableImpl(schemaName, tableName, alias string) voterTable {
	var (
		UserIDColumn    = postgres.StringColumn("user_id")
		ExpiresAtColumn = postgres.TimestampColumn("expires_at")
		allColumns      = postgres.ColumnList{UserIDColumn, ExpiresAtColumn}
		mutableColumns  = postgres.ColumnList{ExpiresAtColumn}
	)

	return voterTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:    UserIDColumn,
		ExpiresAt: ExpiresAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
