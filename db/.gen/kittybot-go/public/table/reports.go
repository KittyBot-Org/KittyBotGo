//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Reports = newReportsTable("public", "reports", "")

type reportsTable struct {
	postgres.Table

	//Columns
	ID          postgres.ColumnInteger
	UserID      postgres.ColumnString
	GuildID     postgres.ColumnString
	Description postgres.ColumnString
	CreatedAt   postgres.ColumnTimestamp
	Confirmed   postgres.ColumnBool
	MessageID   postgres.ColumnString
	ChannelID   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ReportsTable struct {
	reportsTable

	EXCLUDED reportsTable
}

// AS creates new ReportsTable with assigned alias
func (a ReportsTable) AS(alias string) *ReportsTable {
	return newReportsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReportsTable with assigned schema name
func (a ReportsTable) FromSchema(schemaName string) *ReportsTable {
	return newReportsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReportsTable with assigned table prefix
func (a ReportsTable) WithPrefix(prefix string) *ReportsTable {
	return newReportsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReportsTable with assigned table suffix
func (a ReportsTable) WithSuffix(suffix string) *ReportsTable {
	return newReportsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReportsTable(schemaName, tableName, alias string) *ReportsTable {
	return &ReportsTable{
		reportsTable: newReportsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newReportsTableImpl("", "excluded", ""),
	}
}

func newReportsTableImpl(schemaName, tableName, alias string) reportsTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		UserIDColumn      = postgres.StringColumn("user_id")
		GuildIDColumn     = postgres.StringColumn("guild_id")
		DescriptionColumn = postgres.StringColumn("description")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		ConfirmedColumn   = postgres.BoolColumn("confirmed")
		MessageIDColumn   = postgres.StringColumn("message_id")
		ChannelIDColumn   = postgres.StringColumn("channel_id")
		allColumns        = postgres.ColumnList{IDColumn, UserIDColumn, GuildIDColumn, DescriptionColumn, CreatedAtColumn, ConfirmedColumn, MessageIDColumn, ChannelIDColumn}
		mutableColumns    = postgres.ColumnList{UserIDColumn, GuildIDColumn, DescriptionColumn, CreatedAtColumn, ConfirmedColumn, MessageIDColumn, ChannelIDColumn}
	)

	return reportsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		UserID:      UserIDColumn,
		GuildID:     GuildIDColumn,
		Description: DescriptionColumn,
		CreatedAt:   CreatedAtColumn,
		Confirmed:   ConfirmedColumn,
		MessageID:   MessageIDColumn,
		ChannelID:   ChannelIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
