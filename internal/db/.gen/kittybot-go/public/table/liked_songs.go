//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var LikedSongs = newLikedSongsTable("public", "liked_songs", "")

type likedSongsTable struct {
	postgres.Table

	//Columns
	UserID    postgres.ColumnString
	Query     postgres.ColumnString
	Title     postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LikedSongsTable struct {
	likedSongsTable

	EXCLUDED likedSongsTable
}

// AS creates new LikedSongsTable with assigned alias
func (a LikedSongsTable) AS(alias string) *LikedSongsTable {
	return newLikedSongsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LikedSongsTable with assigned schema name
func (a LikedSongsTable) FromSchema(schemaName string) *LikedSongsTable {
	return newLikedSongsTable(schemaName, a.TableName(), a.Alias())
}

func newLikedSongsTable(schemaName, tableName, alias string) *LikedSongsTable {
	return &LikedSongsTable{
		likedSongsTable: newLikedSongsTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newLikedSongsTableImpl("", "excluded", ""),
	}
}

func newLikedSongsTableImpl(schemaName, tableName, alias string) likedSongsTable {
	var (
		UserIDColumn    = postgres.StringColumn("user_id")
		QueryColumn     = postgres.StringColumn("query")
		TitleColumn     = postgres.StringColumn("title")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		allColumns      = postgres.ColumnList{UserIDColumn, QueryColumn, TitleColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{QueryColumn, CreatedAtColumn}
	)

	return likedSongsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:    UserIDColumn,
		Query:     QueryColumn,
		Title:     TitleColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
