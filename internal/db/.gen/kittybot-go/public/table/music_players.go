//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var MusicPlayers = newMusicPlayersTable("public", "music_players", "")

type musicPlayersTable struct {
	postgres.Table

	//Columns
	GuildID              postgres.ColumnString
	State                postgres.ColumnString
	PlayingTrackUserData postgres.ColumnString
	Type                 postgres.ColumnInteger
	Queue                postgres.ColumnString
	LoopingType          postgres.ColumnInteger
	History              postgres.ColumnString
	SkipVotes            postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MusicPlayersTable struct {
	musicPlayersTable

	EXCLUDED musicPlayersTable
}

// AS creates new MusicPlayersTable with assigned alias
func (a MusicPlayersTable) AS(alias string) *MusicPlayersTable {
	return newMusicPlayersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MusicPlayersTable with assigned schema name
func (a MusicPlayersTable) FromSchema(schemaName string) *MusicPlayersTable {
	return newMusicPlayersTable(schemaName, a.TableName(), a.Alias())
}

func newMusicPlayersTable(schemaName, tableName, alias string) *MusicPlayersTable {
	return &MusicPlayersTable{
		musicPlayersTable: newMusicPlayersTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newMusicPlayersTableImpl("", "excluded", ""),
	}
}

func newMusicPlayersTableImpl(schemaName, tableName, alias string) musicPlayersTable {
	var (
		GuildIDColumn              = postgres.StringColumn("guild_id")
		StateColumn                = postgres.StringColumn("state")
		PlayingTrackUserDataColumn = postgres.StringColumn("playing_track_user_data")
		TypeColumn                 = postgres.IntegerColumn("type")
		QueueColumn                = postgres.StringColumn("queue")
		LoopingTypeColumn          = postgres.IntegerColumn("looping_type")
		HistoryColumn              = postgres.StringColumn("history")
		SkipVotesColumn            = postgres.StringColumn("skip_votes")
		allColumns                 = postgres.ColumnList{GuildIDColumn, StateColumn, PlayingTrackUserDataColumn, TypeColumn, QueueColumn, LoopingTypeColumn, HistoryColumn, SkipVotesColumn}
		mutableColumns             = postgres.ColumnList{StateColumn, PlayingTrackUserDataColumn, TypeColumn, QueueColumn, LoopingTypeColumn, HistoryColumn, SkipVotesColumn}
	)

	return musicPlayersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		GuildID:              GuildIDColumn,
		State:                StateColumn,
		PlayingTrackUserData: PlayingTrackUserDataColumn,
		Type:                 TypeColumn,
		Queue:                QueueColumn,
		LoopingType:          LoopingTypeColumn,
		History:              HistoryColumn,
		SkipVotes:            SkipVotesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
