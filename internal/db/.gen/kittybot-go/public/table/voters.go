//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Voters = newVotersTable("public", "voters", "")

type votersTable struct {
	postgres.Table

	//Columns
	ID        postgres.ColumnString
	ExpiresAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type VotersTable struct {
	votersTable

	EXCLUDED votersTable
}

// AS creates new VotersTable with assigned alias
func (a VotersTable) AS(alias string) *VotersTable {
	return newVotersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VotersTable with assigned schema name
func (a VotersTable) FromSchema(schemaName string) *VotersTable {
	return newVotersTable(schemaName, a.TableName(), a.Alias())
}

func newVotersTable(schemaName, tableName, alias string) *VotersTable {
	return &VotersTable{
		votersTable: newVotersTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newVotersTableImpl("", "excluded", ""),
	}
}

func newVotersTableImpl(schemaName, tableName, alias string) votersTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		ExpiresAtColumn = postgres.TimestampzColumn("expires_at")
		allColumns      = postgres.ColumnList{IDColumn, ExpiresAtColumn}
		mutableColumns  = postgres.ColumnList{ExpiresAtColumn}
	)

	return votersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		ExpiresAt: ExpiresAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
